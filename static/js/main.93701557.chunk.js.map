{"version":3,"sources":["components/ControlButton.js","App.js","index.js"],"names":["ControlButton","styled","div","props","top","left","ref","useRef","containerRef","axis","setLeft","setTop","onXMove","containerRect","current","getBoundingClientRect","containerLeft","containerWidth","width","percent","window","event","clientX","toFixed","style","onYMove","containerTop","containerHeight","height","clientY","stopMove","document","onmousemove","onMouseDown","onmouseup","Container","Title","h1","Shape","borderRadius","CodePreviewer","Code","p","Copy","HiddenInput","input","App","useState","leftTopX","setLeftTopX","leftTopY","setLeftTopY","rightTopX","setRightTopX","rightTopY","setRightTopY","rightBottomX","setRightBottomX","rightBottomY","setRightBottomY","leftBottomX","setLeftBottomX","leftBottomY","setLeftBottomY","horizentalRadius","verticalRadius","id","type","value","onChange","onClick","copyText","getElementById","select","setSelectionRange","execCommand","alert","ReactDOM","render"],"mappings":"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","file":"static/js/main.93701557.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nconst ControlButton = styled.div`\n    position: absolute;\n    top: ${props => `${props.top}%` || 'unset'};\n    left:  ${props => `${props.left}%` || 'unset'};\n    width: 16px;\n    height: 16px;\n    border: 2px solid #111111;\n    background: #ffffff;\n    z-index: 1;\n\n    transform: translate(-8px, -8px);\n\n    &:hover, :active {\n        cursor: pointer;\n        background: yellow;\n    }\n`;\n\nexport default props => {\n    const ref = useRef(null);\n    const { containerRef, left, top, axis, setLeft, setTop } = props;\n\n    const onXMove = () => {\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const containerLeft = containerRect.left;\n        const containerWidth = containerRect.width;\n        const mouseLeft = window.event.clientX;\n        const percent = ((mouseLeft - containerLeft) / containerWidth * 100).toFixed(0);\n\n        if (percent >= 0 && percent <= 100) {\n            ref.current.style.left = `${percent}%`;\n            setLeft(percent);\n        }\n    }\n\n    const onYMove = () => {\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const containerTop = containerRect.top;\n        const containerHeight = containerRect.height;\n        const mouseTop = window.event.clientY;\n        const percent = ((mouseTop - containerTop) / containerHeight * 100).toFixed(0);\n\n        if (percent >= 0 && percent <= 100) {\n            ref.current.style.top = `${percent}%`;\n            setTop(percent);\n        }\n    };\n\n    const stopMove = () => {\n        document.onmousemove = null;\n    };\n\n    const onMouseDown = () => {\n        if (axis === 'x') {\n            document.onmousemove = onXMove;\n        } else if (axis === 'y') {\n            document.onmousemove = onYMove;\n        }\n        document.onmouseup = stopMove;\n    };\n\n    return (\n        <ControlButton\n            ref={ref}\n            top={top}\n            left={left}\n            onMouseDown={onMouseDown}\n        />\n    );\n};","import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nimport ControlButton from './components/ControlButton';\n\nconst Container = styled.div`\n    position: relative;\n    width: 500px;\n    height: 500px;\n    border: 2px dashed #cccccc;\n`;\n\nconst Title = styled.h1`\n    margin: 16px;\n`;\n\nconst Shape = styled.div`\n    background: linear-gradient(45deg, #1976D2, #4FC3F7, #00BCD4);\n    width: 100%;\n    height: 100%;\n    border-radius: ${props => props.borderRadius || 'unset'};\n`;\n\nconst CodePreviewer = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 8px 16px;\n    margin: 16px;\n    border: 1px solid #cccccc;\n`;\n\nconst Code = styled.p`\n    display: inline-flex;\n    margin: 0;\n`;\n\nconst Copy = styled.div`\n    display: inline-flex;\n    padding: 8px 24px;\n    color: #ffffff;\n    background: #2196F3;\n    margin-left: 8px;\n    cursor: pointer;\n\n    &:hover {\n        background: #42A5F5;\n    }\n`;\n\nconst HiddenInput = styled.input`\n    position: fixed;\n    opacity: 0;\n`;\n\nconst App = () => {\n    const containerRef = useRef(null);\n    const [leftTopX, setLeftTopX] = useState(10);\n    const [leftTopY, setLeftTopY] = useState(10);\n    const [rightTopX, setRightTopX] = useState(90);\n    const [rightTopY, setRightTopY] = useState(10);\n    const [rightBottomX, setRightBottomX] = useState(90);\n    const [rightBottomY, setRightBottomY] = useState(90);\n    const [leftBottomX, setLeftBottomX] = useState(10);\n    const [leftBottomY, setLeftBottomY] = useState(90);\n\n    const horizentalRadius = `${leftTopX}% ${100 - rightTopX}% ${100 - rightBottomX}% ${leftBottomX}%`;\n    const verticalRadius = `${leftTopY}% ${rightTopY}% ${100 - rightBottomY}% ${100 - leftBottomY}%`;\n    const borderRadius = `${horizentalRadius} / ${verticalRadius}`;\n\n    const copy = () => {\n        const copyText = document.getElementById('border-radius');\n        copyText.select();\n        copyText.setSelectionRange(0, 99999);\n\n        document.execCommand('copy');\n        alert(`Successfully copy the css: \\r\\n${copyText.value}`);\n    };\n\n    return (\n        <>\n            <Title>Border Radius Previewer</Title>\n            <Container ref={containerRef}>\n                <Shape borderRadius={borderRadius} />\n                <ControlButton\n                    axis=\"x\"\n                    left={leftTopX}\n                    top={0}\n                    setLeft={setLeftTopX}\n                    containerRef={containerRef}\n                />\n                <ControlButton\n                    axis=\"y\"\n                    left={0}\n                    top={leftTopY}\n                    setTop={setLeftTopY}\n                    containerRef={containerRef}\n                />\n                <ControlButton\n                    axis=\"x\"\n                    left={rightTopX}\n                    top={0}\n                    setLeft={setRightTopX}\n                    containerRef={containerRef}\n                />\n                <ControlButton\n                    axis=\"y\"\n                    left={100}\n                    top={rightTopY}\n                    setTop={setRightTopY}\n                    containerRef={containerRef}\n                />\n                <ControlButton\n                    axis=\"x\"\n                    left={rightBottomX}\n                    top={100}\n                    setLeft={setRightBottomX}\n                    containerRef={containerRef}\n                />\n                <ControlButton\n                    axis=\"y\"\n                    left={100}\n                    top={rightBottomY}\n                    setTop={setRightBottomY}\n                    containerRef={containerRef}\n                />\n                <ControlButton\n                    axis=\"x\"\n                    left={leftBottomX}\n                    top={100}\n                    setLeft={setLeftBottomX}\n                    containerRef={containerRef}\n                />\n                <ControlButton\n                    axis=\"y\"\n                    left={0}\n                    top={leftBottomY}\n                    setTop={setLeftBottomY}\n                    containerRef={containerRef}\n                />\n            </Container>\n            <CodePreviewer>\n                <HiddenInput id=\"border-radius\" type=\"text\" value={`border-radius: ${borderRadius};`} onChange={() => { }} />\n                <Code>border-radius: {borderRadius};</Code>\n                <Copy onClick={copy}>Copy</Copy>\n            </CodePreviewer>\n        </>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n);"],"sourceRoot":""}